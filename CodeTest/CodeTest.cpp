// задача 4: ch(x) гиперболический синус
#include<iostream>; //добавляет средства ввода вывода cout cin

using namespace std; // позволяет не писать std::  

double sumN(double, int, double&);//обьявление функций. без этих строк компилятор
double sumE(double, double, int&);//не знает что такое sumE и sumN и выдает ошибку

int main() {
	setlocale(LC_ALL, "rus");//становятся понятными русские буквы
	cout << "Вычисление значений функции ch(x)\n\n";
	double x;//значение аргумента
	int	n; // кол-во слагаемых частичной суммы для задания 1
	double func;// точнное значение функции
	double sum; // значение частичной суммы
	int r = 0; // обьявляем и инициализируем переменную для интерфейса
	double e;// точность вычисления для задания 2
	double last; //последний член суммы ряда

	while (!r) // цикл пользовательского интерфейса
	{

		cout << "задание 1" << endl;
		cout << "введите значение аргумента > ";
		cin >> x;
		cout << "введите число слагаемых > ";
		cin >> n;
		func = cosh(x);// точное значение функции ch(x)
		cout << "точное значение функции > " << func << endl;;
		sum = sumN(x, n, last);//вызываем функцию для подсчета частичной суммы в 1 задании
		cout << "Частичная сумма ряда равна > " << sum << endl;
		cout << "Абсолютная погрешность равна " << fabs(func - sum) << endl;//fabs() - модуль от выражения в скобках
		cout << "Последнее слагаемое равно " << last << endl;

		cout << "================";

		cout << "\nзадание 2" << endl;
		cout << "введите значение аргумента > ";
		cin >> x;
		cout << "задайте точность вычислений > ";
		cin >> e;
		func = cosh(x);//точное значение функции
		cout << "точное значение функции > " << func << endl;
		sum = sumE(x, e, n); // вызываем функцию для подсчета частичной суммы ряда в 2 задаче
		cout << "частичная сумма ряда с заданной точностью равна >" << sum << endl;
		cout << "учтено " << n << " членов ряда\n";
		sum = sumE(x, e / 10, n);//вызываем ту же функцию, но точность в 10 раз больше
		cout << "частичная сумма ряда с точностью большей в 10 раз равна >" << sum << endl;
		cout << "учтено " << n << " членов ряда\n\n";

		cout << "Хотите повторить? 0 если да, любое число если нет" << endl;
		cin >> r;
	}
}
// подобрать такое выражение чтобы сумма ряда считалась гладко у меня не получилось
// поэтому местами есть решения для обхода  ошибок
double sumN(double x, int n, double& last)
{
	last = 1;
	double sum = last;
	double r; //Отношение n го слагаемлого к (n - 1) му
	for (int i = 2; i <= n; ++i)//пока в последовательности не будет i членов работает цикл.
	{
		r = (x * x) / ((2 * i - 2) * (2 * i - 3));// из за скобки (2*-2) возникают все проблемы, т.к она обращается в 0 при n=1
		last *= r;
		sum += last;
	}
	if (n == 0)//проверка на 0 челенов последовательности
	{
		last = 0;
		return 0;
	}
	return sum;
}
double sumE(double x, double e, int& n)
{
	double last = 1;//инициализация последнего элемента суммы
	double sum = last;
	double r;//Отношение n го слагаемлого к (n - 1) му.почему в примере r обьявляется внутри цикла?
	int i = 1;//счетчик слагаемых частичной суммы, т.к. n не подходит

	for (n = 2; fabs(last) > e; ++n)// пока последний элемент суммы больше некоторого числа работает цикл
	{
		r = (x * x) / ((2 * n - 2) * (2 * n - 3));
		last *= r;//n-й элемент последовательности 
		sum += last;

		++i;//счетчик слагаемых +1
	}
	n = i;//так как n изначально был счетчиком присваеваем ему соответствующее значение
	return sum;
}